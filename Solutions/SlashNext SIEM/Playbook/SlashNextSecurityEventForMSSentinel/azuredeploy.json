{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "SlashNext Security Events for Microsoft Sentinel - Get customer incidents and log",
        "description": "The playbook will run after every 3 mintues to get list of events occured to a customer in that time and log them in Log Analytic Workspace.",
        "prerequisites": [
            "1.**SlashNext Logic Apps Connector** supports **Basic** authentication, while creating connection you will be asked to provide API key.",
            "To acquire SlashNext API key, please contact us at [support@slashnext.com](mailto:support@slashnext.com) or visit [SlashNext.com](www.slashnext.com)",
            "2. Prior to the deployment of this playbook, Azure log analytic workspace needs to be deployed under the same subscription.",
            "3. Prior to the deployment of this playbook, Azure storage account needs to be deployed under the same subscription.",
            "4. Prior to the deployment of this playbook, Inside storage account create a container named as offset."
        ],
        "postDeployment": [
            "1. Authorize each connection.",
            "2. Authorize SlashNext custom connector using SlashNext customer key.",
            "3. Check readme.md for detailed instructions."
        ],
        "lastUpdateTime": "2023-06-16T12:00:00.000Z",
        "support": {
            "tier": "community"
        },
        "author": {
            "name": "SlashNext"
        },
        "entities": [],
        "tags": [],
        "releaseNotes": [
            {
                "version": "1.0.0",
                "title": "SlashNext Security Events for Microsoft Sentinel",
                "notes": [ "Initial version" ]
            }
        ]
    },
    "parameters": {
        "Playbook Name": {
            "defaultValue": "SlashNextSecurityEventsforMicrosoftSentinel",
            "type": "String"
        },
        "Storage Account Name": {
            "type": "String",
            "metadata": {
                "description": "Name of Storage account to be created."
            }
        },
        "Storage Key":{
            "type": "secureString",
            "metadata":{
                "description":"Primary or secondary key of storage account"
            }
        },
        "Process x weeks Data": {
            "metadata": {
                "description": "Previous week from which scanning should start."
            },
            "type": "int",
            "defaultValue": 5
        },
        "Workspace ID": {
            "type": "String",
            "metadata": {
                "description": "Log analytic workspace ID"
            }
        },

        "Workspace Key":{
            "type": "secureString",
            "metadata":{
                "description":"Primary or secondary key of storage account"
            }
        },
        "Enable Email Incident": {
            "type": "bool",
            "metadata": {
                "description": "Enable email incidents logging."
            },
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": true
        },
        "Enable Web Incident": {
            "type": "bool",
            "metadata": {
                "description": "Enable web incidents logging."
            },
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": true
        },
        "Enable SMS Incident": {
            "type": "bool",
            "metadata": {
                "description": "Enable sms/mobile incidents logging."
            },
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": true
        }
    },
    "variables": {
        "storage_path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('slashnextstorage'))}/files/@{encodeURIComponent(encodeURIComponent('JTJmb2Zmc2V0JTJmb2Zmc2V0LnR4dA=='))}/content",
        "slashnext_connection": "SlashNext-CMS",
        "blob_connection_name": "[concat('SNX-Storage-', substring(toLower(uniqueString(resourceGroup().id, concat('[resourceGroup().locatio', 'n]'))),0,5))]",
        "workspace_connection_name": "[concat('SNX-Workspace-', substring(toLower(uniqueString(resourceGroup().id, concat('[resourceGroup().locatio', 'n]'))),0,5))]"
    },
    "resources": [
        
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('slashnext_connection')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "Slashnext-CMS-Original",
                "parameterValues": {
                    "api_key": "1234"
                },
                "customParameterValues": {},
                "nonSecretParameterValues": {},
                "api": {
                    "name": "SlashNext-CMS",
                    "displayName": "SlashNext-CMS",
                    "description": "SlashNext-CMS is the integration API for Azure, it provide insight of the events occured on endpoint of a customer",
                    "iconUri": "https://content.powerapps.com/resource/makerx/static/media/default-connection-icon.00d06b6e.svg",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', variables('slashnext_connection'))]",
                    "type": "Microsoft.Web/customApis"
                },
                "testLinks": []
            }
        },
    
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('workspace_connection_name')]",

            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('workspace_connection_name')]",
                "parameterValues": {
                    "username": "[parameters('Workspace ID')]",
                    "password": "[parameters('Workspace Key')]"
                },
                "api": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis',resourceGroup().location, 'azureloganalyticsdatacollector')]"
                }

            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('blob_connection_name')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('blob_connection_name')]",
                "parameterValues": {
                    "accountName": "[parameters('Storage Account Name')]",
                    "accessKey": "[parameters('Storage Key')]"
                },
                "api": {
                    "name": "azureblob",
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis',resourceGroup().location, 'azureblob')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('Playbook Name')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('blob_connection_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('workspace_connection_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('slashnext_connection'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 3
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 3
                            },
                            "type": "Recurrence",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "runs": 1
                                }
                            }
                        }
                    },
                    "actions": {
                        "Current_time": {
                            "runAfter": {},
                            "type": "Expression",
                            "kind": "CurrentTime",
                            "inputs": {}
                        },
                        "Email_vector_var": {
                            "runAfter": {
                                "is_SMS": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "email-vector",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "If_Web_Threats": {
                            "actions": {
                                "Set_Web_Vector": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "web-vector",
                                        "value": "browser"
                                    }
                                }
                            },
                            "runAfter": {
                                "if_Email_Threats": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('is_web')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_min_offset": {
                            "runAfter": {
                                "Current_time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "min_offset",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Iteration_Flag": {
                            "runAfter": {
                                "max_offset": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "iteration_flag",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "SMS_vector_var": {
                            "runAfter": {
                                "Web_vector_var": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SMS-vector",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Save_offset_condition": {
                            "actions": {
                                "create_file": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "{\"offset\":\"@{variables('offset_max')}\"}",
                                        "headers": {
                                            "ReadFileMetadataFromServer": true
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/files",
                                        "queries": {
                                            "folderPath": "/offset",
                                            "name": "offset.txt",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Traverse_each_item": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('offset_save')",
                                            1
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Scope": {
                            "actions": {
                                "Get_content": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "[replace(variables('storage_path'),'slashnextstorage',parameters('Storage Account Name'))]",
                                        "queries": {
                                            "inferContentType": true
                                        }
                                    }
                                },
                                "Parse_data": {
                                    "runAfter": {
                                        "Get_content": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_content')",
                                        "schema": {
                                            "properties": {
                                                "offset": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Past_Time": {
                                    "runAfter": {
                                        "Get_content": [
                                            "Failed"
                                        ]
                                    },
                                    "type": "Expression",
                                    "kind": "GetPastTime",
                                    "inputs": {
                                        "interval": "[parameters('Process x weeks Data')]",
                                        "timeUnit": "Week"
                                    }
                                },
                                "date_updated": {
                                    "runAfter": {
                                        "Past_Time": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "min_offset",
                                        "value": "@{formatDateTime(body('Past_Time'),'yyyy-MM-dd HH:mm:ss')}"
                                    }
                                },
                                "minimum_offset": {
                                    "runAfter": {
                                        "Parse_data": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "min_offset",
                                        "value": "@body('Parse_data')?['offset']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_min_offset": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Terminate": {
                            "runAfter": {
                                "Save_offset_condition": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runStatus": "Succeeded"
                            }
                        },
                        "Traverse_each_item": {
                            "actions": {
                                "Increment_Page": {
                                    "runAfter": {
                                        "On_success_response": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "IncrementVariable",
                                    "inputs": {
                                        "name": "page",
                                        "value": 1
                                    }
                                },
                                "Loop_Break_condition": {
                                    "actions": {
                                        "set_iteration_flag": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "iteration_flag",
                                                "value": 0
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Increment_Page": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('counter')",
                                                    "@body('incident_list_response')?['data']?['totalitems']"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "On_success_response": {
                                    "actions": {
                                        "For_each": {
                                            "foreach": "@body('incident_list_response')?['data']?['items']",
                                            "actions": {
                                                "Increment_Counter": {
                                                    "runAfter": {
                                                        "Send_Data": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "IncrementVariable",
                                                    "inputs": {
                                                        "name": "counter",
                                                        "value": 1
                                                    }
                                                },
                                                "Parse_single_event": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@items('For_each')",
                                                        "schema": {
                                                            "properties": {
                                                                "email": {
                                                                    "type": "string"
                                                                },
                                                                "eptypeText": {
                                                                    "type": "string"
                                                                },
                                                                "fullname": {
                                                                    "type": "string"
                                                                },
                                                                "groupname": {
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "type": "integer"
                                                                },
                                                                "incidenttime": {
                                                                    "type": "string"
                                                                },
                                                                "infectionvector": {
                                                                    "type": "string"
                                                                },
                                                                "loggingaction": {
                                                                    "type": "string"
                                                                },
                                                                "phishingUrl": {
                                                                    "type": "string"
                                                                },
                                                                "threatname": {
                                                                    "type": "string"
                                                                },
                                                                "threattype": {
                                                                    "type": "string"
                                                                },
                                                                "threattypeText": {
                                                                    "type": "string"
                                                                },
                                                                "totalincidents": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Send_Data": {
                                                    "runAfter": {
                                                        "Parse_single_event": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "{\n\"Targeted User\":\"@{body('Parse_single_event')?['fullname']}\",\n\"Targeted User Email\":\"@{body('Parse_single_event')?['email']}\",\n\"Groups\":\"@{body('Parse_single_event')?['groupname']}\",\n\"Total Incidents\":\"@{body('Parse_single_event')?['totalincidents']}\",\n\"Blocked Threat Name\":\"@{body('Parse_single_event')?['threatname']}\",\n\"Blocked Threat Type\":\"@{body('Parse_single_event')?['threattype']}\",\n\"Incident Time\":\"@{body('Parse_single_event')?['incidenttime']}\",\n\"Action\":\"@{body('Parse_single_event')?['loggingaction']}\",\n\"End Point\":\"@{body('Parse_single_event')?['eptypeText']}\",\n\"Blocked URL\":\"@{body('Parse_single_event')?['phishingUrl']}\",\n\"Threat Type\":\"@{body('Parse_single_event')?['threattype']}\",\n\"Infection Vector\":\"@{body('Parse_single_event')?['infectionvector']}\"\n}",
                                                        "headers": {
                                                            "Log-Type": "SIEMCustomerLogs"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/api/logs"
                                                    }
                                                }
                                            },
                                            "runAfter": {},
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "incident_list_response": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('incident_list_response')?['code']",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_Save_offset_true": {
                                    "runAfter": {
                                        "Loop_Break_condition": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "offset_save",
                                        "value": 1
                                    }
                                },
                                "incident_list_response": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "filters": [
                                                {
                                                    "time": "@{variables('min_offset')}#@{variables('offset_max')}",
                                                    "vector": [
                                                        "@variables('SMS-vector')",
                                                        "@variables('web-vector')",
                                                        "@variables('email-vector')"
                                                    ]
                                                }
                                            ],
                                            "page": "@variables('page')",
                                            "rpp": "@variables('rpp')",
                                            "sortby": "time",
                                            "sortorder": "desc"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['SlashNext']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/api/integration/v7/incidents/list"
                                    }
                                }
                            },
                            "runAfter": {
                                "save_offset": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@not(equals(variables('iteration_stop'), variables('iteration_flag')))",
                            "limit": {
                                "count": 1000,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Web_vector_var": {
                            "runAfter": {
                                "Email_vector_var": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "web-vector",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "counter": {
                            "runAfter": {
                                "iteration_stop": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "counter",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "if_Email_Threats": {
                            "actions": {
                                "Set_Email_Vector": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "email-vector",
                                        "value": "email"
                                    }
                                }
                            },
                            "runAfter": {
                                "SMS_vector_var": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('is_email')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "if_SMS_Threats": {
                            "actions": {
                                "Set_SMS_vector": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "SMS-vector",
                                        "value": "mobile"
                                    }
                                }
                            },
                            "runAfter": {
                                "If_Web_Threats": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('is_sms')",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "is_Email": {
                            "runAfter": {
                                "Scope": [
                                    "Succeeded",
                                    "Failed"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "is_email",
                                        "type": "boolean",
                                        "value": "[parameters('Enable Email Incident')]"
                                    }
                                ]
                            }
                        },
                        "is_SMS": {
                            "runAfter": {
                                "is_Web": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "is_sms",
                                        "type": "boolean",
                                        "value": "[parameters('Enable SMS Incident')]"
                                    }
                                ]
                            }
                        },
                        "is_Web": {
                            "runAfter": {
                                "is_Email": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "is_web",
                                        "type": "boolean",
                                        "value": "[parameters('Enable Web Incident')]"
                                    }
                                ]
                            }
                        },
                        "iteration_stop": {
                            "runAfter": {
                                "Iteration_Flag": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "iteration_stop",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "max_offset": {
                            "runAfter": {
                                "page": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "offset_max",
                                        "type": "string",
                                        "value": "@{formatDateTime(body('Current_Time'),'yyyy-MM-dd HH:mm:ss')}"
                                    }
                                ]
                            }
                        },
                        "page": {
                            "runAfter": {
                                "rpp": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "page",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "rpp": {
                            "runAfter": {
                                "if_SMS_Threats": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "rpp",
                                        "type": "integer",
                                        "value": 100
                                    }
                                ]
                            }
                        },
                        "save_offset": {
                            "runAfter": {
                                "counter": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "offset_save",
                                        "type": "integer",
                                        "value": 1
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "SlashNext": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',variables('slashnext_connection'))]",
                                "connectionName": "SlashNext-CMS",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', variables('slashnext_connection'))]"
                            },
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',variables('blob_connection_name'))]",
                                "connectionName": "[concat(parameters('Playbook Name'),'-storage')]",
                                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', resourceGroup().location, 'azureblob')]"
                            },
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',variables('workspace_connection_name'))]",
                                "connectionName": "[concat(parameters('Playbook Name'),'-workspace')]",
                                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', resourceGroup().location, 'azureloganalyticsdatacollector')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}