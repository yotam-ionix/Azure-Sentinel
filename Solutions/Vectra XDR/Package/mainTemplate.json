{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "TME - tme@vetcra.ai",
    "comments": "Solution template for Vectra XDR"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Vectra XDR",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "variables": {
    "email": "tme@vetcra.ai",
    "_email": "[variables('email')]",
    "_solutionName": "Vectra XDR",
    "_solutionVersion": "3.0.1",
    "solutionId": "vectraaiinc.vectra-xdr-for-microsoft-sentinel",
    "_solutionId": "[variables('solutionId')]",
    "uiConfigId1": "VectraXDR",
    "_uiConfigId1": "[variables('uiConfigId1')]",
    "dataConnectorContentId1": "VectraXDR",
    "_dataConnectorContentId1": "[variables('dataConnectorContentId1')]",
    "dataConnectorId1": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
    "_dataConnectorId1": "[variables('dataConnectorId1')]",
    "dataConnectorTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-dc-',uniquestring(variables('_dataConnectorContentId1'))))]",
    "dataConnectorVersion1": "1.0.0",
    "_dataConnectorcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','dc','-', uniqueString(concat(variables('_solutionId'),'-','DataConnector','-',variables('_dataConnectorContentId1'),'-', variables('dataConnectorVersion1'))))]",
    "parserName1": "VectraDetections",
    "_parserName1": "[concat(parameters('workspace'),'/',variables('parserName1'))]",
    "parserId1": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
    "_parserId1": "[variables('parserId1')]",
    "parserTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId1'))))]",
    "parserVersion1": "1.0.0",
    "parserContentId1": "VectraDetections-Parser",
    "_parserContentId1": "[variables('parserContentId1')]",
    "_parsercontentProductId1": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('_parserContentId1'),'-', variables('parserVersion1'))))]",
    "parserName2": "VectraAudits",
    "_parserName2": "[concat(parameters('workspace'),'/',variables('parserName2'))]",
    "parserId2": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName2'))]",
    "_parserId2": "[variables('parserId2')]",
    "parserTemplateSpecName2": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId2'))))]",
    "parserVersion2": "1.0.0",
    "parserContentId2": "VectraAudits-Parser",
    "_parserContentId2": "[variables('parserContentId2')]",
    "_parsercontentProductId2": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('_parserContentId2'),'-', variables('parserVersion2'))))]",
    "parserName3": "VectraEntityScoring",
    "_parserName3": "[concat(parameters('workspace'),'/',variables('parserName3'))]",
    "parserId3": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName3'))]",
    "_parserId3": "[variables('parserId3')]",
    "parserTemplateSpecName3": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId3'))))]",
    "parserVersion3": "1.0.0",
    "parserContentId3": "VectraEntityScoring-Parser",
    "_parserContentId3": "[variables('parserContentId3')]",
    "_parsercontentProductId3": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('_parserContentId3'),'-', variables('parserVersion3'))))]",
    "parserName4": "VectraHealth",
    "_parserName4": "[concat(parameters('workspace'),'/',variables('parserName4'))]",
    "parserId4": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName4'))]",
    "_parserId4": "[variables('parserId4')]",
    "parserTemplateSpecName4": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId4'))))]",
    "parserVersion4": "1.0.0",
    "parserContentId4": "VectraHealth-Parser",
    "_parserContentId4": "[variables('parserContentId4')]",
    "_parsercontentProductId4": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('_parserContentId4'),'-', variables('parserVersion4'))))]",
    "parserName5": "VectraLockdown",
    "_parserName5": "[concat(parameters('workspace'),'/',variables('parserName5'))]",
    "parserId5": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName5'))]",
    "_parserId5": "[variables('parserId5')]",
    "parserTemplateSpecName5": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-pr-',uniquestring(variables('_parserContentId5'))))]",
    "parserVersion5": "1.0.0",
    "parserContentId5": "VectraLockdown-Parser",
    "_parserContentId5": "[variables('parserContentId5')]",
    "_parsercontentProductId5": "[concat(take(variables('_solutionId'),50),'-','pr','-', uniqueString(concat(variables('_solutionId'),'-','Parser','-',variables('_parserContentId5'),'-', variables('parserVersion5'))))]",
    "workbookVersion1": "1.0.0",
    "workbookContentId1": "VectraXDR",
    "workbookId1": "[resourceId('Microsoft.Insights/workbooks', variables('workbookContentId1'))]",
    "workbookTemplateSpecName1": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(parameters('workspace'),'-wb-',uniquestring(variables('_workbookContentId1'))))]",
    "_workbookContentId1": "[variables('workbookContentId1')]",
    "workspaceResourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
    "_workbookcontentProductId1": "[concat(take(variables('_solutionId'),50),'-','wb','-', uniqueString(concat(variables('_solutionId'),'-','Workbook','-',variables('_workbookContentId1'),'-', variables('workbookVersion1'))))]",
    "_solutioncontentProductId": "[concat(take(variables('_solutionId'),50),'-','sl','-', uniqueString(concat(variables('_solutionId'),'-','Solution','-',variables('_solutionId'),'-', variables('_solutionVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('dataConnectorTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "Vectra XDR data connector with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('dataConnectorVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "[variables('_uiConfigId1')]",
                  "title": "Vectra XDR (using Azure Functions)",
                  "publisher": "Vectra",
                  "descriptionMarkdown": "The [Vectra XDR](https://www.vectra.ai/) connector gives the capability to ingest Vectra Detections, Audits, Entity Scoring, Lockdown and Health data into Microsoft Sentinel through the Vectra REST API. Refer to the API documentation: `https://support.vectra.ai/s/article/KB-VS-1666` for more information.",
                  "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. Follow the steps to use this Kusto functions alias **VectraDetections** in queries and workbooks [Follow steps to get this VectraDetections Kusto functions>](https://aka.ms/sentinel-VectraDetections-parser), **VectraAudits** in queries and workbooks [Follow steps to get this VectraAudits Kusto functions>](https://aka.ms/sentinel-VectraAudits-parser) and **VectraEntityScoring** in queries and workbooks [Follow steps to get this VectraEntityScoring Kusto functions>](https://aka.ms/sentinel-VectraEntityScoring-parser).",
                  "graphQueries": [
                    {
                      "metricName": "Total Detections data received",
                      "legend": "Detections_Data_CL",
                      "baseQuery": "Detections_Data_CL"
                    },
                    {
                      "metricName": "Total Audits data received",
                      "legend": "Audits_Data_CL",
                      "baseQuery": "Audits_Data_CL"
                    },
                    {
                      "metricName": "Total Entity Scoring data received",
                      "legend": "Entity_Scoring_Data_CL",
                      "baseQuery": "Entity_Scoring_Data_CL"
                    },
                    {
                      "metricName": "Total Lockdown data received",
                      "legend": "Lockdown_Data_CL",
                      "baseQuery": "Lockdown_Data_CL"
                    },
                    {
                      "metricName": "Total Health data received",
                      "legend": "Health_Data_CL",
                      "baseQuery": "Health_Data_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Vectra Detections Events - All Detections Events.",
                      "query": "Detections_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Audits Events - All Audits Events.",
                      "query": "Audits_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Entity Scoring Events - All Entity Scoring Events.",
                      "query": "Entity_Scoring_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Lockdown Events - All Lockdown Events.",
                      "query": "Lockdown_Data_CL\n | sort by TimeGenerated desc"
                    },
                    {
                      "description": "Vectra Health Events - All Health Events.",
                      "query": "Health_Data_CL\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "Detections_Data_CL",
                      "lastDataReceivedQuery": "Detections_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Audits_Data_CL",
                      "lastDataReceivedQuery": "Audits_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Entity_Scoring_Data_CL",
                      "lastDataReceivedQuery": "Entity_Scoring_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Lockdown_Data_CL",
                      "lastDataReceivedQuery": "Lockdown_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    },
                    {
                      "name": "Health_Data_CL",
                      "lastDataReceivedQuery": "Health_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Detections_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Audits_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Entity_Scoring_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Lockdown_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    },
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "Health_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "REST API Credentials/permissions",
                        "description": "**Vectra Client ID** and **Client Secret**  is required for Health, Entity Scoring, Detections, Lockdown and Audit data collection.  See the documentation to learn more about API on the `https://support.vectra.ai/s/article/KB-VS-1666`."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the Vectra API to pull its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. Follow these steps for [Detections Parser](https://aka.ms/sentinel-VectraDetections-parser), [Audits Parser](https://aka.ms/sentinel-VectraAudits-parser), [Entity Scoring Parser](https://aka.ms/sentinel-VectraEntityScoring-parser), [Lockdown Parser](https://aka.ms/sentinel-VectraLockdown-parser) and [Health Parser](https://aka.ms/sentinel-VectraHealth-parser) to create the Kusto functions alias, **VectraDetections**, **VectraAudits**, **VectraEntityScoring**, **VectraLockdown** and **VectraHealth**."
                    },
                    {
                      "description": "**STEP 1 - Configuration steps for the Vectra API Credentials**\n\n Follow these instructions to create a Vectra Client ID and Client Secret.\n 1. Log into your Vectra portal\n 2. Navigate to Manage -> API Clients\n 3. From the API Clients page, select 'Add API Client' to create a new client.\n 4. Add Client Name, select Role and click on Generate Credentials to obtain your client credentials. \n 5. Be sure to record your Client ID and Secret Key for safekeeping. You will need these two pieces of information to obtain an access token from the Vectra API. An access token is required to make requests to all of the Vectra API endpoints."
                    },
                    {
                      "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Vectra data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Vectra API Authorization Credentials",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Vectra connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VectraXDRAPI-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client ID - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client ID - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the Vectra data connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VectraXDRAPI-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VECTRAXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client ID - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client ID - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tlogAnalyticsUri (optional) \n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2023-04-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
                "contentId": "[variables('_dataConnectorContentId1')]",
                "kind": "DataConnector",
                "version": "[variables('dataConnectorVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "contentKind": "DataConnector",
        "displayName": "Vectra XDR (using Azure Functions)",
        "contentProductId": "[variables('_dataConnectorcontentProductId1')]",
        "id": "[variables('_dataConnectorcontentProductId1')]",
        "version": "[variables('dataConnectorVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2023-04-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(variables('_dataConnectorId1'),'/'))))]",
      "dependsOn": [
        "[variables('_dataConnectorId1')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', variables('_dataConnectorContentId1'))]",
        "contentId": "[variables('_dataConnectorContentId1')]",
        "kind": "DataConnector",
        "version": "[variables('dataConnectorVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',variables('_dataConnectorContentId1'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Vectra XDR (using Azure Functions)",
          "publisher": "Vectra",
          "descriptionMarkdown": "The [Vectra XDR](https://www.vectra.ai/) connector gives the capability to ingest Vectra Detections, Audits, Entity Scoring, Lockdown and Health data into Microsoft Sentinel through the Vectra REST API. Refer to the API documentation: `https://support.vectra.ai/s/article/KB-VS-1666` for more information.",
          "graphQueries": [
            {
              "metricName": "Total Detections data received",
              "legend": "Detections_Data_CL",
              "baseQuery": "Detections_Data_CL"
            },
            {
              "metricName": "Total Audits data received",
              "legend": "Audits_Data_CL",
              "baseQuery": "Audits_Data_CL"
            },
            {
              "metricName": "Total Entity Scoring data received",
              "legend": "Entity_Scoring_Data_CL",
              "baseQuery": "Entity_Scoring_Data_CL"
            },
            {
              "metricName": "Total Lockdown data received",
              "legend": "Lockdown_Data_CL",
              "baseQuery": "Lockdown_Data_CL"
            },
            {
              "metricName": "Total Health data received",
              "legend": "Health_Data_CL",
              "baseQuery": "Health_Data_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "Detections_Data_CL",
              "lastDataReceivedQuery": "Detections_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Audits_Data_CL",
              "lastDataReceivedQuery": "Audits_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Entity_Scoring_Data_CL",
              "lastDataReceivedQuery": "Entity_Scoring_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Lockdown_Data_CL",
              "lastDataReceivedQuery": "Lockdown_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            },
            {
              "name": "Health_Data_CL",
              "lastDataReceivedQuery": "Health_Data_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Detections_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Audits_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Entity_Scoring_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Lockdown_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            },
            {
              "type": "IsConnectedQuery",
              "value": [
                "Health_Data_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Vectra Detections Events - All Detections Events.",
              "query": "Detections_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Audits Events - All Audits Events.",
              "query": "Audits_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Entity Scoring Events - All Entity Scoring Events.",
              "query": "Entity_Scoring_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Lockdown Events - All Lockdown Events.",
              "query": "Lockdown_Data_CL\n | sort by TimeGenerated desc"
            },
            {
              "description": "Vectra Health Events - All Health Events.",
              "query": "Health_Data_CL\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "REST API Credentials/permissions",
                "description": "**Vectra Client ID** and **Client Secret**  is required for Health, Entity Scoring, Detections, Lockdown and Audit data collection.  See the documentation to learn more about API on the `https://support.vectra.ai/s/article/KB-VS-1666`."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Vectra API to pull its logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. Follow these steps for [Detections Parser](https://aka.ms/sentinel-VectraDetections-parser), [Audits Parser](https://aka.ms/sentinel-VectraAudits-parser), [Entity Scoring Parser](https://aka.ms/sentinel-VectraEntityScoring-parser), [Lockdown Parser](https://aka.ms/sentinel-VectraLockdown-parser) and [Health Parser](https://aka.ms/sentinel-VectraHealth-parser) to create the Kusto functions alias, **VectraDetections**, **VectraAudits**, **VectraEntityScoring**, **VectraLockdown** and **VectraHealth**."
            },
            {
              "description": "**STEP 1 - Configuration steps for the Vectra API Credentials**\n\n Follow these instructions to create a Vectra Client ID and Client Secret.\n 1. Log into your Vectra portal\n 2. Navigate to Manage -> API Clients\n 3. From the API Clients page, select 'Add API Client' to create a new client.\n 4. Add Client Name, select Role and click on Generate Credentials to obtain your client credentials. \n 5. Be sure to record your Client ID and Secret Key for safekeeping. You will need these two pieces of information to obtain an access token from the Vectra API. An access token is required to make requests to all of the Vectra API endpoints."
            },
            {
              "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Vectra data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following) readily available.., as well as the Vectra API Authorization Credentials",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Vectra connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-VectraXDRAPI-azuredeploy)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the below information : \n\t\tFunction Name \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client ID - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client ID - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Vectra data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-VectraXDRAPI-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. VECTRAXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspace ID \n\t\tWorkspace Key \n\t\tVectra Base URL (https://<vectra-portal-url>) \n\t\tVectra Client Id - Health \n\t\tVectra Client Secret Key - Health \n\t\tVectra Client Id - Entity Scoring \n\t\tVectra Client Secret - Entity Scoring \n\t\tVectra Client Id - Detections \n\t\tVectra Client Secret - Detections \n\t\tVectra Client ID - Audits \n\t\tVectra Client Secret - Audits \n\t\tVectra Client ID - Lockdown \n\t\tVectra Client Secret - Lockdown \n\t\tStartTime (in MM/DD/YYYY HH:MM:SS Format) \n\t\tAudits Table Name \n\t\tDetections Table Name \n\t\tEntity Scoring Table Name \n\t\tLockdown Table Name \n\t\tHealth Table Name \n\t\tLog Level (Default: INFO) \n\t\tLockdown Schedule \n\t\tHealth Schedule \n\t\tDetections Schedule \n\t\tAudits Schedule \n\t\tEntity Scoring Schedule \n\t\tlogAnalyticsUri (optional) \n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
            }
          ],
          "id": "[variables('_uiConfigId1')]",
          "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. Follow the steps to use this Kusto functions alias **VectraDetections** in queries and workbooks [Follow steps to get this VectraDetections Kusto functions>](https://aka.ms/sentinel-VectraDetections-parser), **VectraAudits** in queries and workbooks [Follow steps to get this VectraAudits Kusto functions>](https://aka.ms/sentinel-VectraAudits-parser) and **VectraEntityScoring** in queries and workbooks [Follow steps to get this VectraEntityScoring Kusto functions>](https://aka.ms/sentinel-VectraEntityScoring-parser)."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraDetections Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName1')]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraDetections",
                "category": "Samples",
                "functionAlias": "VectraDetections",
                "query": "\nlet VectraDetections_view  = view () { \r\n    Detections_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraDetections\",\r\n        EventProduct=\"VectraDetections\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Detection Category\"] = column_ifexists('Category', ''),\r\n        [\"Is Triaged\"] = column_ifexists('triaged_b', ''),\r\n        [\"Detection Name\"] = column_ifexists('detection_type_s', ''),\r\n        [\"D Type Vname\"] = column_ifexists('d_type_vname_s', ''),\r\n        [\"Detection ID\"] = column_ifexists('detection_id_d', ''),\r\n        [\"Vectra Pivot\"] = column_ifexists('detection_href_s', ''),\r\n        [\"Entity ID\"] = toint(column_ifexists('entity_id_d', '')),\r\n        URL = column_ifexists('url_s', ''),\r\n        [\"Entity UID\"] = column_ifexists('entity_uid_s', ''),\r\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\r\n        [\"Details\"] = column_ifexists('detail_s', ''),\r\n        Severity = column_ifexists('Severity', ''),\r\n        [\"Source IP\"] = column_ifexists('src_ip_s', ''),\r\n        [\"Detection Details\"] = column_ifexists('d_detection_details_s', ''),\r\n        [\"Normal Domains\"] = column_ifexists('normal_domains_s', ''),\r\n        [\"Is Targeting Key Asset\"] = column_ifexists('is_targeting_key_asset_s', ''),\r\n        [\"Source Host\"] = column_ifexists('src_host_s', ''),\r\n        Summary = column_ifexists('summary_s', ''),\r\n        [\"Grouped Details\"] = column_ifexists('grouped_details_s', '')\r\n    | extend \r\n        [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"&pivot=Vectra-Sentinel-1.0.0\"), ['Vectra Pivot']),\r\n        URL = case(isnotempty(URL), strcat(URL, \"?pivot=Vectra-Sentinel-1.0.0\"), URL)\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Detection Category\"],\r\n        [\"Is Triaged\"],\r\n        [\"Detection Name\"],\r\n        [\"D Type Vname\"],\r\n        [\"Detection ID\"],\r\n        [\"Vectra Pivot\"],\r\n        [\"Entity ID\"],\r\n        URL,\r\n        [\"Entity UID\"],\r\n        [\"Last Updated\"],\r\n        [\"Details\"],\r\n        Severity,\r\n        [\"Source IP\"],\r\n        [\"Detection Details\"],\r\n        [\"Normal Domains\"],\r\n        [\"Is Targeting Key Asset\"],\r\n        [\"Source Host\"],\r\n        Summary,\r\n        [\"Grouped Details\"]\r\n};\r\nVectraDetections_view",
                "functionParameters": "",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraDetections"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId1'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName1')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
                "contentId": "[variables('_parserContentId1')]",
                "kind": "Parser",
                "version": "[variables('parserVersion1')]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_parserContentId1')]",
        "contentKind": "Parser",
        "displayName": "VectraDetections",
        "contentProductId": "[variables('_parsercontentProductId1')]",
        "id": "[variables('_parsercontentProductId1')]",
        "version": "[variables('parserVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('_parserName1')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraDetections",
        "category": "Samples",
        "functionAlias": "VectraDetections",
        "query": "\nlet VectraDetections_view  = view () { \r\n    Detections_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraDetections\",\r\n        EventProduct=\"VectraDetections\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Detection Category\"] = column_ifexists('Category', ''),\r\n        [\"Is Triaged\"] = column_ifexists('triaged_b', ''),\r\n        [\"Detection Name\"] = column_ifexists('detection_type_s', ''),\r\n        [\"D Type Vname\"] = column_ifexists('d_type_vname_s', ''),\r\n        [\"Detection ID\"] = column_ifexists('detection_id_d', ''),\r\n        [\"Vectra Pivot\"] = column_ifexists('detection_href_s', ''),\r\n        [\"Entity ID\"] = toint(column_ifexists('entity_id_d', '')),\r\n        URL = column_ifexists('url_s', ''),\r\n        [\"Entity UID\"] = column_ifexists('entity_uid_s', ''),\r\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\r\n        [\"Details\"] = column_ifexists('detail_s', ''),\r\n        Severity = column_ifexists('Severity', ''),\r\n        [\"Source IP\"] = column_ifexists('src_ip_s', ''),\r\n        [\"Detection Details\"] = column_ifexists('d_detection_details_s', ''),\r\n        [\"Normal Domains\"] = column_ifexists('normal_domains_s', ''),\r\n        [\"Is Targeting Key Asset\"] = column_ifexists('is_targeting_key_asset_s', ''),\r\n        [\"Source Host\"] = column_ifexists('src_host_s', ''),\r\n        Summary = column_ifexists('summary_s', ''),\r\n        [\"Grouped Details\"] = column_ifexists('grouped_details_s', '')\r\n    | extend \r\n        [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"&pivot=Vectra-Sentinel-1.0.0\"), ['Vectra Pivot']),\r\n        URL = case(isnotempty(URL), strcat(URL, \"?pivot=Vectra-Sentinel-1.0.0\"), URL)\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Detection Category\"],\r\n        [\"Is Triaged\"],\r\n        [\"Detection Name\"],\r\n        [\"D Type Vname\"],\r\n        [\"Detection ID\"],\r\n        [\"Vectra Pivot\"],\r\n        [\"Entity ID\"],\r\n        URL,\r\n        [\"Entity UID\"],\r\n        [\"Last Updated\"],\r\n        [\"Details\"],\r\n        Severity,\r\n        [\"Source IP\"],\r\n        [\"Detection Details\"],\r\n        [\"Normal Domains\"],\r\n        [\"Is Targeting Key Asset\"],\r\n        [\"Source Host\"],\r\n        Summary,\r\n        [\"Grouped Details\"]\r\n};\r\nVectraDetections_view",
        "functionParameters": "",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "VectraDetections"
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId1'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId1')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName1'))]",
        "contentId": "[variables('_parserContentId1')]",
        "kind": "Parser",
        "version": "[variables('parserVersion1')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserTemplateSpecName2')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraAudits Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion2')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName2')]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraAudits",
                "category": "Samples",
                "functionAlias": "VectraAudits",
                "query": "\nlet VectraAudits_view  = view () { \r\n    Audits_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraAudits\",\r\n        EventProduct=\"VectraAudits\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"User ID\"] = column_ifexists('user_id_d', ''),\r\n        Username = column_ifexists('username_s', ''),\r\n        [\"User Type\"] = column_ifexists('user_type_s', ''),\r\n        [\"User Role\"] = column_ifexists('user_role_s', ''),\r\n        Version = column_ifexists('version_s', ''),\r\n        [\"Source IP\"] = column_ifexists('source_ip_s', ''),\r\n        [\"Event Timestamp\"] = column_ifexists('event_timestamp_t', ''),\r\n        Message = column_ifexists('Message', ''),\r\n        Status = column_ifexists('result_status_s', ''),\r\n        [\"Event Data\"] = column_ifexists('event_data_s', ''),\r\n        [\"Event Object\"] = column_ifexists('event_object_s', ''),\r\n        [\"Event Action\"] = column_ifexists('event_action_s', ''),\r\n        [\"API Client ID\"] = column_ifexists('api_client_id_g', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        ['User ID'],\r\n        Username,\r\n        ['User Type'],\r\n        [\"User Role\"],\r\n        Version,\r\n        ['Source IP'],\r\n        ['Event Timestamp'],\r\n        Message,\r\n        Status,\r\n        [\"Event Data\"],\r\n        ['Event Object'],\r\n        ['Event Action'],\r\n        ['API Client ID']\r\n};\r\nVectraAudits_view",
                "functionParameters": "",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraAudits"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId2'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName2')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName2'))]",
                "contentId": "[variables('_parserContentId2')]",
                "kind": "Parser",
                "version": "[variables('parserVersion2')]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_parserContentId2')]",
        "contentKind": "Parser",
        "displayName": "VectraAudits",
        "contentProductId": "[variables('_parsercontentProductId2')]",
        "id": "[variables('_parsercontentProductId2')]",
        "version": "[variables('parserVersion2')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('_parserName2')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraAudits",
        "category": "Samples",
        "functionAlias": "VectraAudits",
        "query": "\nlet VectraAudits_view  = view () { \r\n    Audits_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraAudits\",\r\n        EventProduct=\"VectraAudits\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"User ID\"] = column_ifexists('user_id_d', ''),\r\n        Username = column_ifexists('username_s', ''),\r\n        [\"User Type\"] = column_ifexists('user_type_s', ''),\r\n        [\"User Role\"] = column_ifexists('user_role_s', ''),\r\n        Version = column_ifexists('version_s', ''),\r\n        [\"Source IP\"] = column_ifexists('source_ip_s', ''),\r\n        [\"Event Timestamp\"] = column_ifexists('event_timestamp_t', ''),\r\n        Message = column_ifexists('Message', ''),\r\n        Status = column_ifexists('result_status_s', ''),\r\n        [\"Event Data\"] = column_ifexists('event_data_s', ''),\r\n        [\"Event Object\"] = column_ifexists('event_object_s', ''),\r\n        [\"Event Action\"] = column_ifexists('event_action_s', ''),\r\n        [\"API Client ID\"] = column_ifexists('api_client_id_g', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        ['User ID'],\r\n        Username,\r\n        ['User Type'],\r\n        [\"User Role\"],\r\n        Version,\r\n        ['Source IP'],\r\n        ['Event Timestamp'],\r\n        Message,\r\n        Status,\r\n        [\"Event Data\"],\r\n        ['Event Object'],\r\n        ['Event Action'],\r\n        ['API Client ID']\r\n};\r\nVectraAudits_view",
        "functionParameters": "",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "VectraAudits"
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId2'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId2')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName2'))]",
        "contentId": "[variables('_parserContentId2')]",
        "kind": "Parser",
        "version": "[variables('parserVersion2')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserTemplateSpecName3')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraEntityScoring Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion3')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName3')]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraEntityScoring",
                "category": "Samples",
                "functionAlias": "VectraEntityScoring",
                "query": "\nlet VectraEntityScoring_view  = view () { \r\n    Entity_Scoring_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraEntityScoring\",\r\n        EventProduct=\"VectraEntityScoring\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\r\n        [\"Active Detection Types\"] = column_ifexists('active_detection_types_s', ''),\r\n        [\"Breadth Contrib\"] = column_ifexists('breadth_contrib_d', ''),\r\n        Category = column_ifexists('Category', ''),\r\n        Importance = column_ifexists('importance_d', ''),\r\n        Type = column_ifexists('type_s', ''),\r\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\r\n        [\"Is Prioritized\"] = column_ifexists('is_prioritized_b', ''),\r\n        [\"Last Detection ID\"] = column_ifexists('last_detection_id_d', ''),\r\n        [\"Last Detection Type\"] = column_ifexists('last_detection_type_s', ''),\r\n        [\"Last Detection URL\"] = column_ifexists('last_detection_url_s', ''),\r\n        [\"Last Detection\"] = column_ifexists('last_detection_s', ''),\r\n        Name = column_ifexists('name_s', ''),\r\n        Severity = column_ifexists('severity_s', ''),\r\n        [\"Urgency Score\"] = column_ifexists('urgency_score_d', ''),\r\n        [\"Vectra Pivot\"] = column_ifexists('url_s', ''),\r\n        Velocity = column_ifexists('velocity_contrib_d', ''),\r\n        [\"Attack Rating\"] =  column_ifexists('attack_rating_d', '')\r\n    | extend [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"?pivot=Vectra-Sentinel-1.0.0\"), ['Vectra Pivot'])\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Entity ID\"],\r\n        Name,\r\n        Importance,\r\n        Type,\r\n        [\"Is Prioritized\"],\r\n        Severity,\r\n        [\"Urgency Score\"],\r\n        [\"Vectra Pivot\"],\r\n        Category,\r\n        [\"Last Detection URL\"],\r\n        [\"Last Detection Type\"],\r\n        [\"Last Detection ID\"],\r\n        [\"Last Detection\"],\r\n        [\"Active Detection Types\"],\r\n        [\"Last Updated\"],\r\n        [\"Breadth Contrib\"],\r\n        Velocity,\r\n        [\"Attack Rating\"]\r\n};\r\nVectraEntityScoring_view",
                "functionParameters": "",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraEntityScoring"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId3'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName3')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName3'))]",
                "contentId": "[variables('_parserContentId3')]",
                "kind": "Parser",
                "version": "[variables('parserVersion3')]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_parserContentId3')]",
        "contentKind": "Parser",
        "displayName": "VectraEntityScoring",
        "contentProductId": "[variables('_parsercontentProductId3')]",
        "id": "[variables('_parsercontentProductId3')]",
        "version": "[variables('parserVersion3')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('_parserName3')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraEntityScoring",
        "category": "Samples",
        "functionAlias": "VectraEntityScoring",
        "query": "\nlet VectraEntityScoring_view  = view () { \r\n    Entity_Scoring_Data_CL\r\n    | extend \r\n        EventVendor=\"VectraEntityScoring\",\r\n        EventProduct=\"VectraEntityScoring\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\r\n        [\"Active Detection Types\"] = column_ifexists('active_detection_types_s', ''),\r\n        [\"Breadth Contrib\"] = column_ifexists('breadth_contrib_d', ''),\r\n        Category = column_ifexists('Category', ''),\r\n        Importance = column_ifexists('importance_d', ''),\r\n        Type = column_ifexists('type_s', ''),\r\n        [\"Last Updated\"] = column_ifexists('event_timestamp_t', ''),\r\n        [\"Is Prioritized\"] = column_ifexists('is_prioritized_b', ''),\r\n        [\"Last Detection ID\"] = column_ifexists('last_detection_id_d', ''),\r\n        [\"Last Detection Type\"] = column_ifexists('last_detection_type_s', ''),\r\n        [\"Last Detection URL\"] = column_ifexists('last_detection_url_s', ''),\r\n        [\"Last Detection\"] = column_ifexists('last_detection_s', ''),\r\n        Name = column_ifexists('name_s', ''),\r\n        Severity = column_ifexists('severity_s', ''),\r\n        [\"Urgency Score\"] = column_ifexists('urgency_score_d', ''),\r\n        [\"Vectra Pivot\"] = column_ifexists('url_s', ''),\r\n        Velocity = column_ifexists('velocity_contrib_d', ''),\r\n        [\"Attack Rating\"] =  column_ifexists('attack_rating_d', '')\r\n    | extend [\"Vectra Pivot\"] = case(isnotempty(['Vectra Pivot']), strcat(['Vectra Pivot'], \"?pivot=Vectra-Sentinel-1.0.0\"), ['Vectra Pivot'])\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Entity ID\"],\r\n        Name,\r\n        Importance,\r\n        Type,\r\n        [\"Is Prioritized\"],\r\n        Severity,\r\n        [\"Urgency Score\"],\r\n        [\"Vectra Pivot\"],\r\n        Category,\r\n        [\"Last Detection URL\"],\r\n        [\"Last Detection Type\"],\r\n        [\"Last Detection ID\"],\r\n        [\"Last Detection\"],\r\n        [\"Active Detection Types\"],\r\n        [\"Last Updated\"],\r\n        [\"Breadth Contrib\"],\r\n        Velocity,\r\n        [\"Attack Rating\"]\r\n};\r\nVectraEntityScoring_view",
        "functionParameters": "",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "VectraEntityScoring"
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId3'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId3')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName3'))]",
        "contentId": "[variables('_parserContentId3')]",
        "kind": "Parser",
        "version": "[variables('parserVersion3')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserTemplateSpecName4')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraHealth Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion4')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName4')]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraHealth",
                "category": "Samples",
                "functionAlias": "VectraHealth",
                "query": "\nlet VectraHealth_view  = view () { \r\n    Health_Data_CL\r\n    | extend\r\n        EventVendor=\"VectraHealth\",\r\n        EventProduct=\"VectraHealth\",\r\n        ['Last Updated'] = column_ifexists('system_version_last_update_s', ''),\r\n        ['CPU Usage - User (%)'] = column_ifexists('cpu_user_percent_d', ''),\r\n        ['CPU Usage - System (%)'] = column_ifexists('cpu_system_percent_d', ''),\r\n        ['CPU Usage - Idle (%)'] = column_ifexists('cpu_idle_percent_d', ''),\r\n        ['Disk Utilization (%)'] = column_ifexists('disk_disk_utilization_usage_percent_d', ''),\r\n        ['Memory Utilization (%)'] = column_ifexists('memory_usage_percent_d', ''),\r\n        ['Power Status'] = column_ifexists('power_status_s', ''),\r\n        ['Power Error'] = column_ifexists('power_error_s', ''),\r\n        Network = column_ifexists('network_s', ''),\r\n        Sensors = column_ifexists('sensors_s', ''),\r\n        Connectivity_Sensors = column_ifexists('connectivity_sensors_s', ''),\r\n        System_Version_Last_Update = column_ifexists('system_version_last_update_s', ''),\r\n        Trafficdrop_Sensors = column_ifexists('trafficdrop_sensors_s', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        System_Version_Last_Update,\r\n        ['Last Updated'],\r\n        ['CPU Usage - User (%)'],\r\n        ['CPU Usage - System (%)'],\r\n        ['CPU Usage - Idle (%)'],\r\n        ['Disk Utilization (%)'],\r\n        ['Memory Utilization (%)'],\r\n        ['Power Status'],\r\n        ['Power Error'],\r\n        Network,\r\n        Sensors,\r\n        Connectivity_Sensors,\r\n        Trafficdrop_Sensors\r\n};\r\nVectraHealth_view()",
                "functionParameters": "",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraHealth"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId4'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName4')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName4'))]",
                "contentId": "[variables('_parserContentId4')]",
                "kind": "Parser",
                "version": "[variables('parserVersion4')]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_parserContentId4')]",
        "contentKind": "Parser",
        "displayName": "VectraHealth",
        "contentProductId": "[variables('_parsercontentProductId4')]",
        "id": "[variables('_parsercontentProductId4')]",
        "version": "[variables('parserVersion4')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('_parserName4')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraHealth",
        "category": "Samples",
        "functionAlias": "VectraHealth",
        "query": "\nlet VectraHealth_view  = view () { \r\n    Health_Data_CL\r\n    | extend\r\n        EventVendor=\"VectraHealth\",\r\n        EventProduct=\"VectraHealth\",\r\n        ['Last Updated'] = column_ifexists('system_version_last_update_s', ''),\r\n        ['CPU Usage - User (%)'] = column_ifexists('cpu_user_percent_d', ''),\r\n        ['CPU Usage - System (%)'] = column_ifexists('cpu_system_percent_d', ''),\r\n        ['CPU Usage - Idle (%)'] = column_ifexists('cpu_idle_percent_d', ''),\r\n        ['Disk Utilization (%)'] = column_ifexists('disk_disk_utilization_usage_percent_d', ''),\r\n        ['Memory Utilization (%)'] = column_ifexists('memory_usage_percent_d', ''),\r\n        ['Power Status'] = column_ifexists('power_status_s', ''),\r\n        ['Power Error'] = column_ifexists('power_error_s', ''),\r\n        Network = column_ifexists('network_s', ''),\r\n        Sensors = column_ifexists('sensors_s', ''),\r\n        Connectivity_Sensors = column_ifexists('connectivity_sensors_s', ''),\r\n        System_Version_Last_Update = column_ifexists('system_version_last_update_s', ''),\r\n        Trafficdrop_Sensors = column_ifexists('trafficdrop_sensors_s', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        System_Version_Last_Update,\r\n        ['Last Updated'],\r\n        ['CPU Usage - User (%)'],\r\n        ['CPU Usage - System (%)'],\r\n        ['CPU Usage - Idle (%)'],\r\n        ['Disk Utilization (%)'],\r\n        ['Memory Utilization (%)'],\r\n        ['Power Status'],\r\n        ['Power Error'],\r\n        Network,\r\n        Sensors,\r\n        Connectivity_Sensors,\r\n        Trafficdrop_Sensors\r\n};\r\nVectraHealth_view()",
        "functionParameters": "",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "VectraHealth"
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId4'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId4')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName4'))]",
        "contentId": "[variables('_parserContentId4')]",
        "kind": "Parser",
        "version": "[variables('parserVersion4')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('parserTemplateSpecName5')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraLockdown Data Parser with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('parserVersion5')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "name": "[variables('_parserName5')]",
              "apiVersion": "2022-10-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "VectraLockdown",
                "category": "Samples",
                "functionAlias": "VectraLockdown",
                "query": "\nlet VectraLockdown_view  = view () { \r\n    Lockdown_Data_CL\r\n    | extend\r\n        EventVendor=\"VectraLockdown\",\r\n        EventProduct=\"VectraLockdown\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\r\n        [\"Entity Name\"] = column_ifexists('entity_name_s', ''),\r\n        [\"Entity Type\"] = column_ifexists('entity_type_s ', ''),\r\n        Type = column_ifexists('type_s', ''),\r\n        [\"Locked Date\"] = column_ifexists('lock_event_timestamp_t', ''),\r\n        [\"Unlock Date\"] = column_ifexists('unlock_event_timestamp_t', ''),\r\n        [\"Locked By\"] = column_ifexists('locked_by_s', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Entity ID\"],\r\n        [\"Entity Name\"],\r\n        [\"Entity Type\"],\r\n        Type,\r\n        [\"Locked Date\"],\r\n        [\"Unlock Date\"],\r\n        [\"Locked By\"]\r\n};\r\nVectraLockdown_view()",
                "functionParameters": "",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "VectraLockdown"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId5'),'/'))))]",
              "dependsOn": [
                "[variables('_parserName5')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName5'))]",
                "contentId": "[variables('_parserContentId5')]",
                "kind": "Parser",
                "version": "[variables('parserVersion5')]",
                "source": {
                  "name": "Vectra XDR",
                  "kind": "Solution",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_parserContentId5')]",
        "contentKind": "Parser",
        "displayName": "VectraLockdown",
        "contentProductId": "[variables('_parsercontentProductId5')]",
        "id": "[variables('_parsercontentProductId5')]",
        "version": "[variables('parserVersion5')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2022-10-01",
      "name": "[variables('_parserName5')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "VectraLockdown",
        "category": "Samples",
        "functionAlias": "VectraLockdown",
        "query": "\nlet VectraLockdown_view  = view () { \r\n    Lockdown_Data_CL\r\n    | extend\r\n        EventVendor=\"VectraLockdown\",\r\n        EventProduct=\"VectraLockdown\",\r\n        ID = column_ifexists('id_d', ''),\r\n        [\"Entity ID\"] = column_ifexists('entity_id_d', ''),\r\n        [\"Entity Name\"] = column_ifexists('entity_name_s', ''),\r\n        [\"Entity Type\"] = column_ifexists('entity_type_s ', ''),\r\n        Type = column_ifexists('type_s', ''),\r\n        [\"Locked Date\"] = column_ifexists('lock_event_timestamp_t', ''),\r\n        [\"Unlock Date\"] = column_ifexists('unlock_event_timestamp_t', ''),\r\n        [\"Locked By\"] = column_ifexists('locked_by_s', '')\r\n    | project\r\n        TimeGenerated,\r\n        EventVendor,\r\n        EventProduct,\r\n        ID,\r\n        [\"Entity ID\"],\r\n        [\"Entity Name\"],\r\n        [\"Entity Type\"],\r\n        Type,\r\n        [\"Locked Date\"],\r\n        [\"Unlock Date\"],\r\n        [\"Locked By\"]\r\n};\r\nVectraLockdown_view()",
        "functionParameters": "",
        "version": 1,
        "tags": [
          {
            "name": "description",
            "value": "VectraLockdown"
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(variables('_parserId5'),'/'))))]",
      "dependsOn": [
        "[variables('_parserId5')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), variables('parserName5'))]",
        "contentId": "[variables('_parserContentId5')]",
        "kind": "Parser",
        "version": "[variables('parserVersion5')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "apiVersion": "2023-04-01-preview",
      "name": "[variables('workbookTemplateSpecName1')]",
      "location": "[parameters('workspace-location')]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', variables('_solutionId'))]"
      ],
      "properties": {
        "description": "VectraXDRWorkbook Workbook with template version 3.0.1",
        "mainTemplate": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "[variables('workbookVersion1')]",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "[variables('workbookContentId1')]",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "This workbook provides visualization of Audit, Detections, Entity Scoring, Lockdown and Health data."
              },
              "properties": {
                "displayName": "[parameters('workbook1-name')]",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"67d14413-6eca-4803-b447-c9c7f744ce43\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Entity\",\"subTarget\":\"Entity\",\"style\":\"link\"},{\"id\":\"cbc93b75-3cc9-4191-b334-0d44c7652ce0\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Detections\",\"subTarget\":\"Detections\",\"style\":\"link\"},{\"id\":\"919866f6-87e0-479f-969f-eedc7d970251\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Lockdown\",\"subTarget\":\"Lockdown\",\"style\":\"link\"},{\"id\":\"ce743dcd-55b5-42f7-8553-a9d120b1d74b\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Audit\",\"subTarget\":\"Audit\",\"style\":\"link\"},{\"id\":\"2a426647-ce0b-44ef-8603-bae6bd8e2343\",\"cellValue\":\"setTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Health\",\"subTarget\":\"Health\",\"style\":\"link\"}]},\"name\":\"links - 0\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"c2e47223-15df-44b3-8040-0bfc72eeab0a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"timerange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"f909ea8d-ce5f-41a1-8b26-d2e34169f149\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"View\",\"label\":\"Prioritized\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"true\\\", \\\"label\\\":\\\"Yes\\\" },\\r\\n    { \\\"value\\\":\\\"false\\\", \\\"label\\\":\\\"No\\\" }\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"value\":[\"true\"]},{\"id\":\"732ba446-ecc2-49fd-be25-53ee45d3f9c2\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DataSource\",\"label\":\"Data Source Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"AWS\\\", \\\"label\\\":\\\"AWS\\\"},\\r\\n    {\\\"value\\\":\\\"M365/AAD\\\",\\\"label\\\":\\\"Microsoft 365/Azure AD\\\"},\\r\\n    {\\\"value\\\":\\\"Network\\\",\\\"label\\\":\\\"Network\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"e2fa7c64-c20c-4e7b-9557-81c64f2c5b58\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityType\",\"label\":\"Entity Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View}))\\r\\n| extend source = tostring(split(Name,\\\":\\\")[0])\\r\\n| extend source2 = iff(isempty(source),\\\"NA\\\",source)\\r\\n| where ('*' in ({DataSource}) or source2 in ({DataSource}))\\r\\n| summarize arg_max(TimeGenerated, *) by Type\\r\\n| distinct ID, ['Type']\\r\\n| extend splitted_entity_type = split(['Type'],\\\"_\\\")\\r\\n| mv-expand splitted_entity_type = splitted_entity_type\\r\\n| extend cap = toupper(substring(splitted_entity_type,0,1)), rest_string = substring(splitted_entity_type,1)\\r\\n| extend joined_str = strcat(cap,rest_string)\\r\\n| distinct joined_str,ID,['Type']\\r\\n| summarize joined_array = make_list(todynamic(joined_str)) by ID, ['Type']\\r\\n| extend capitalized_Category = strcat_array(joined_array, \\\" \\\")\\r\\n| distinct ['Type'], capitalized_Category\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange}\\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| extend priority = case(\\r\\n    ['Is Prioritized'] == true, \\\"Prioritized\\\",\\r\\n    ['Is Prioritized'] == false, \\\"Not Prioritized\\\",\\r\\n    \\\"Unknown\\\"\\r\\n)\\r\\n| summarize count() by priority\\r\\n| order by priority desc\",\"size\":3,\"title\":\"Entity Count by Priority\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"priority\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Prioritized\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Not Prioritized\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2, Name)\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| sort by ['Urgency Score'] desc, Importance desc\\r\\n| extend Importance = case(\\r\\n    Importance == 0, \\\"Low\\\",\\r\\n    Importance == 1, \\\"Medium\\\",\\r\\n    Importance == 2, \\\"High\\\",\\r\\n    \\\"Unknown\\\"\\r\\n), Velocity = case(\\r\\n    Velocity == 0, \\\"Low\\\",\\r\\n    Velocity == 1, \\\"Medium\\\",\\r\\n    Velocity == 2, \\\"High\\\",\\r\\n    \\\"Unknown\\\"\\r\\n)\\r\\n| project ['Urgency Score'], ['Attack Rating'], ['Entity Name'], ['Vectra Pivot'], Prioritized = ['Is Prioritized'], ['Data Source Type'], Importance, Velocity, ['Last Updated']\",\"size\":0,\"showAnalytics\":true,\"title\":\"Entity View\",\"showRefreshButton\":true,\"exportFieldName\":\"Vectra Pivot\",\"exportParameterName\":\"P_deep_url\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\"}},{\"columnMatch\":\"Prioritized\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"true\",\"representation\":\"red\",\"text\":\"true\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Deep Link\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Entity View grid to view more details_\"},\"name\":\"text - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraEntityScoring\\r\\n| where ['Last Updated'] {timerange} \\r\\n| summarize arg_max(['Last Updated'],*) by ['Entity ID'], Type\\r\\n| where ('*' in ({View}) or [\\\"Is Prioritized\\\"] in ({View})) and ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend ['Data Source Type'] = case(Name startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        Name startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        Name startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        Name startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2, Name)\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource})) and ['Vectra Pivot'] == '{P_deep_url}'\\r\\n| project ID, ['Entity ID'], ['Data Source Type'], ['Entity Name'], Name, Importance, ['Type'], ['Is Prioritized'], Severity, [\\\"Urgency Score\\\"], ['Vectra Pivot'], Category, ['Last Detection URL'], ['Last Detection Type'], [\\\"Last Detection ID\\\"], ['Active Detection Types'], ['Last Updated'], ['Breadth Contrib'], Velocity, ['Attack Rating']\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Entity View data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Last Detection URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] > ago(90d) and URL == '{P_deep_url}'\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\",2,['Entity UID'])\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source IP\\\"] = case(isnotempty([\\\"Source IP\\\"]), [\\\"Source IP\\\"], \\\"Not Applicable\\\")\\r\\n| project ['Entity Name'], ['Detection Category'], Behavior=[\\\"Detection Name\\\"], ['Vectra Pivot'], ['Data Source Type'],  ['Source IP'], ['Last Updated'], [\\\"Detection Details\\\"], [\\\"Detection ID\\\"]\\r\\n| sort by ['Last Updated'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detection List\",\"showRefreshButton\":true,\"exportFieldName\":\"Detection ID\",\"exportParameterName\":\"P_detection_id\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\",\"linkIsContextBlade\":false}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Detection ID\",\"formatter\":5},{\"columnMatch\":\"Deep Link\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}}],\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Detection List grid to view more details_\"},\"conditionalVisibility\":{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"text - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] > ago(90d) and URL == '{P_deep_url}'\\r\\n| where ['Detection ID'] == '{P_detection_id}'\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source Host\\\"] = parse_json([\\\"Source Host\\\"])[0]\\r\\n| extend [\\\"Grouped Details\\\"] = parse_json([\\\"Grouped Details\\\"])[0]\\r\\n| extend Summary = parse_json(Summary)[0]\\r\\n| extend Details = parse_json(Details)[0]\\r\\n| project ID, ['Detection Category'], ['Is Triaged'], Behavior=[\\\"Detection Name\\\"], [\\\"Detection ID\\\"], [\\\"Vectra Pivot\\\"], [\\\"Entity ID\\\"], URL, [\\\"Entity UID\\\"], [\\\"Last Updated\\\"], [\\\"Detection Details\\\"], [\\\"Details\\\"], Severity, ['Source IP'], [\\\"Normal Domains\\\"], [\\\"Is Targeting Key Asset\\\"], [\\\"Source Host\\\"], Summary, [\\\"Grouped Details\\\"]\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Detection List Data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Source Host\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Summary\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Grouped Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"P_deep_url\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},{\"parameterName\":\"P_detection_id\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"}],\"name\":\"query - 7\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 8\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Entity\"},\"name\":\"Entity\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"8ba900f4-2667-4651-87ee-866de79ed08f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"41b0ee6f-04db-423c-a0fd-babfda10e619\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DataSource\",\"label\":\"Data Source Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"AWS\\\", \\\"label\\\":\\\"AWS\\\"},\\r\\n    {\\\"value\\\":\\\"M365/AAD\\\",\\\"label\\\":\\\"Microsoft 365/Azure AD\\\"},\\r\\n    {\\\"value\\\":\\\"Network\\\",\\\"label\\\":\\\"Network\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"bd9a1ea9-0bec-457d-a24b-f84e15e1af42\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DetectionCategory\",\"label\":\"Detection Category\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    {\\\"value\\\":\\\"botnet\\\", \\\"label\\\":\\\"Botnet\\\"},\\r\\n    {\\\"value\\\":\\\"command_and_control\\\",\\\"label\\\":\\\"Command and Control\\\"},\\r\\n    {\\\"value\\\":\\\"reconnaissance\\\",\\\"label\\\":\\\"Reconnaissance\\\"},\\r\\n    {\\\"value\\\":\\\"lateral_movement\\\",\\\"label\\\":\\\"Lateral Movement\\\"},\\r\\n    {\\\"value\\\":\\\"exfiltration\\\",\\\"label\\\":\\\"Exfiltration\\\"}\\r\\n]\",\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"1144f1b6-24e0-422c-bc8c-9bd87f6d258e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DetectionType\",\"label\":\"Behavior\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend source = tostring(split(['Entity UID'],\\\":\\\")[0])\\r\\n| where ('*' in ({DataSource}) or source in ({DataSource})) and ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory}))\\r\\n| distinct ['Detection Name']\\r\\n| sort by ['Detection Name'] asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"datatable (Count:long, ['Detection Category']:string, category_count:long) [0,\\\"Botnet\\\",1, 0,\\\"Command and Control\\\",2, 0,\\\"Reconnaissance\\\",3, 0,\\\"Lateral Movement\\\",4, 0,\\\"Exfiltration\\\",5]\\r\\n|union\\r\\n(\\r\\nVectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| summarize arg_max(['Last Updated'],*) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend category_count=case(['Detection Category']==\\\"Botnet\\\",1,['Detection Category']==\\\"Command and Control\\\",2,['Detection Category']==\\\"Reconnaissance\\\",3,['Detection Category']==\\\"Lateral Movement\\\",4,['Detection Category']==\\\"Exfiltration\\\",5,6)\\r\\n| summarize Count=count() by ['Detection Category'], category_count\\r\\n)\\r\\n| summarize Count=sum(Count) by ['Detection Category'], category_count\\r\\n| sort by category_count asc\",\"size\":3,\"title\":\"Detection Category Count\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Detection Category\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Command and Control\",\"representation\":\"yellow\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Exfiltration\",\"representation\":\"purple\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Lateral Movement\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Reconnaissance\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Info\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated']\\r\\n{TimeRange}\\r\\n| summarize arg_max(['Last Updated'], *) by ['Detection ID']\\r\\n| extend ['Data Source Type'] = case(\\r\\n                                    ['Entity UID'] startswith \\\"AWS\\\",\\r\\n                                    \\\"AWS\\\", \\r\\n                                    ['Entity UID'] startswith \\\"SAML\\\",\\r\\n                                    \\\"AWS\\\",\\r\\n                                    ['Entity UID'] startswith \\\"O365\\\",\\r\\n                                    \\\"M365/AAD\\\",\\r\\n                                    ['Entity UID'] startswith \\\"M365\\\",\\r\\n                                    \\\"M365/AAD\\\",\\r\\n                                    ['Entity UID'] startswith \\\"Azure\\\",\\r\\n                                    \\\"M365/AAD\\\",\\r\\n                                    \\\"Network\\\"\\r\\n                                )\\r\\n| extend ['Entity Name'] = extract(\\\"^(AWS:|SAML:|O365:|M365:|Azure:)?(.*)$\\\", 2, ['Entity UID'])\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType}))\\r\\n| extend ['Detection Category'] = case(['Detection Category'] == \\\"botnet\\\", \\\"Botnet\\\", ['Detection Category'] == \\\"command_and_control\\\", \\\"Command and Control\\\", ['Detection Category'] == \\\"reconnaissance\\\", \\\"Reconnaissance\\\", ['Detection Category'] == \\\"lateral_movement\\\", \\\"Lateral Movement\\\", ['Detection Category'] == \\\"exfiltration\\\", \\\"Exfiltration\\\", \\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source IP\\\"] = case(isnotempty([\\\"Source IP\\\"]), [\\\"Source IP\\\"], \\\"Not Applicable\\\")\\r\\n| project\\r\\n    ['Entity Name'],\\r\\n    ['Detection Category'],\\r\\n    Behavior=[\\\"Detection Name\\\"],\\r\\n    ['Vectra Pivot'],\\r\\n    ['Data Source Type'],\\r\\n    ['Source IP'],\\r\\n    ['Last Updated'],\\r\\n    [\\\"Detection Details\\\"],\\r\\n    [\\\"Detection ID\\\"]\\r\\n| sort by ['Last Updated'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detection View\",\"showRefreshButton\":true,\"exportFieldName\":\"Detection ID\",\"exportParameterName\":\"P_detection_id\",\"exportDefaultValue\":\"None\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\",\"linkLabel\":\"Pivot to Vectra\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Detection ID\",\"formatter\":5}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 2\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"💡 _Click on a row in the above Detection View grid to view more details_\"},\"name\":\"text - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraDetections\\r\\n| where ['Last Updated'] {TimeRange}\\r\\n| extend ['Data Source Type'] = case(['Entity UID'] startswith \\\"AWS\\\", \\\"AWS\\\", \\r\\n                                        ['Entity UID'] startswith \\\"SAML\\\", \\\"AWS\\\",\\r\\n                                        ['Entity UID'] startswith \\\"O365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"M365\\\", \\\"M365/AAD\\\",\\r\\n                                        ['Entity UID'] startswith \\\"Azure\\\", \\\"M365/AAD\\\",\\\"Network\\\")\\r\\n| where ('*' in ({DataSource}) or ['Data Source Type'] in ({DataSource}))\\r\\n| where ('*' in ({DetectionCategory}) or ['Detection Category'] in ({DetectionCategory})) and ('*' in ({DetectionType}) or ['Detection Name'] in ({DetectionType})) and [\\\"Detection ID\\\"] == '{P_detection_id}'\\r\\n| extend ['Detection Category'] = case(['Detection Category']==\\\"botnet\\\",\\\"Botnet\\\",['Detection Category']==\\\"command_and_control\\\",\\\"Command and Control\\\",['Detection Category']==\\\"reconnaissance\\\",\\\"Reconnaissance\\\",['Detection Category']==\\\"lateral_movement\\\",\\\"Lateral Movement\\\",['Detection Category']==\\\"exfiltration\\\",\\\"Exfiltration\\\",\\\"Unknown\\\")\\r\\n| extend [\\\"Detection Details\\\"] = parse_json([\\\"Detection Details\\\"])[0]\\r\\n| extend [\\\"Detection Details\\\"] = case(isnotempty([\\\"Detection Details\\\"]), [\\\"Detection Details\\\"], \\\"Details too large to display.\\\")\\r\\n| extend [\\\"Source Host\\\"] = parse_json([\\\"Source Host\\\"])[0]\\r\\n| extend [\\\"Grouped Details\\\"] = parse_json([\\\"Grouped Details\\\"])[0]\\r\\n| extend Summary = parse_json(Summary)[0]\\r\\n| project ID, ['Detection Category'], ['Is Triaged'], Behavior=[\\\"Detection Name\\\"], [\\\"Detection ID\\\"], [\\\"Vectra Pivot\\\"], [\\\"Entity ID\\\"], URL, [\\\"Entity UID\\\"], [\\\"Last Updated\\\"], [\\\"Detection Details\\\"], [\\\"Details\\\"], Severity, ['Source IP'], [\\\"Normal Domains\\\"], [\\\"Is Targeting Key Asset\\\"], [\\\"Source Host\\\"], Summary, [\\\"Grouped Details\\\"]\",\"size\":4,\"showAnalytics\":true,\"title\":\"Selected Detection View Data\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vectra Pivot\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"URL\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"Url\"}},{\"columnMatch\":\"Detection Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Source Host\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Summary\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}},{\"columnMatch\":\"Grouped Details\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibility\":{\"parameterName\":\"P_detection_id\",\"comparison\":\"isNotEqualTo\",\"value\":\"None\"},\"name\":\"query - 4\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"Detections\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"ea3f10f3-aa7e-481c-9d4f-7939d1a463a1\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"7df89745-bea2-4a36-9c0a-4e64a01a0423\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityType\",\"label\":\"Entity Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraLockdown\\r\\n| where [\\\"Locked Date\\\"] {TimeRange} or [\\\"Unlock Date\\\"] {TimeRange}\\r\\n| distinct Type\\r\\n| extend cap = toupper(substring(Type,0,1)), rest_string = substring(Type,1)\\r\\n| extend Captilized_type = strcat(cap,rest_string)\\r\\n| distinct ['Type'], Captilized_type\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"90c8487a-b24b-420e-8a70-73baad8d3301\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"EntityLocked\",\"label\":\"Entity Locked\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"True\\\", \\\"label\\\":\\\"True\\\", \\\"selected\\\":true },\\r\\n    { \\\"value\\\":\\\"False\\\", \\\"label\\\":\\\"False\\\", \\\"selected\\\":true}\\r\\n]\",\"value\":[\"False\",\"True\"]}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraLockdown\\r\\n| where case('{TimeRange}' contains 'ago', [\\\"Locked Date\\\"] {TimeRange} or ([\\\"Unlock Date\\\"] {TimeRange} and [\\\"Unlock Date\\\"] <= now()), [\\\"Locked Date\\\"] {TimeRange} or [\\\"Unlock Date\\\"] {TimeRange})\\r\\n| summarize arg_max(TimeGenerated, *) by [\\\"Entity Name\\\"], Type, [\\\"Locked Date\\\"], [\\\"Unlock Date\\\"]\\r\\n| where ('*' in ({EntityType}) or Type in ({EntityType}))\\r\\n| extend current_status = case([\\\"Locked Date\\\"] <= now() and now() < [\\\"Unlock Date\\\"], \\\"True\\\", \\\"False\\\")\\r\\n| where ('*' in ({EntityLocked}) or current_status in ({EntityLocked}))\\r\\n| sort by [\\\"Locked Date\\\"] desc\\r\\n| project [\\\"Entity Name\\\"], [\\\"Entity Type\\\"] = Type, [\\\"Entity Locked\\\"] = current_status, [\\\"Locked By\\\"], [\\\"Locked Date\\\"], [\\\"Unlock Date\\\"]\",\"size\":0,\"showAnalytics\":true,\"title\":\"Lockdown View\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Entity Locked\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"True\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 1\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 2\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Lockdown\"},\"name\":\"lockdown\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9b914837-bb6a-4932-92ce-9671341c2e55\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":604800000}},{\"id\":\"faf02ab6-e28d-4d11-84d7-3039ae73bb37\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ResultStatus\",\"label\":\"Result Status\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"success\\\", \\\"label\\\":\\\"Success\\\" },\\r\\n    { \\\"value\\\":\\\"failure\\\", \\\"label\\\":\\\"Failure\\\" },\\r\\n    {\\\"value\\\":\\\"\\\",\\\"label\\\":\\\"N/A\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"value\":[\"value::all\"]},{\"id\":\"a5e78ed7-0bde-4116-90fc-c37bdc106d19\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Username\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange} and isnotempty(Username)\\r\\n| distinct Username\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\",\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange}\\r\\n| summarize arg_max(TimeGenerated,*) by ID\\r\\n| where ('*' in ({ResultStatus}) or Status in ({ResultStatus}))\\r\\n| where ('*' in ({Username}) or Username in ({Username}))\\r\\n| extend Status = tolower(Status)\\r\\n| extend Result_status = case(\\r\\n    Status == \\\"success\\\", \\\"Success\\\",\\r\\n    Status == \\\"failure\\\", \\\"Failure\\\",\\r\\n    Status == \\\"\\\",\\\"N/A\\\"\\r\\n    ,\\\"Unknown\\\"\\r\\n)\\r\\n| extend importance = case(\\r\\n    Result_status == \\\"Success\\\", 0,\\r\\n    Result_status == \\\"Failure\\\", 1,\\r\\n    Result_status == \\\"NA\\\",2\\r\\n    ,3\\r\\n)\\r\\n| summarize count() by Result_status, importance\\r\\n| sort by importance asc\",\"size\":3,\"title\":\"Audit Logs Count\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Result_status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Success\",\"representation\":\"green\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"Failure\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"NA\",\"representation\":\"gray\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"representation\":\"lightBlue\",\"text\":\"{0}{1}\"}]}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"}},\"showBorder\":true,\"size\":\"auto\"}},\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraAudits\\r\\n| where ['Event Timestamp'] {TimeRange}\\r\\n| summarize arg_max(TimeGenerated,*) by ID\\r\\n| where ('*' in ({ResultStatus}) or Status in ({ResultStatus}))\\r\\n| where ('*' in ({Username}) or Username in ({Username}))\\r\\n| extend Status = case(isnotempty(Status), Status, '-')\\r\\n| extend ['Event Data'] = parse_json(['Event Data'])[0]\\r\\n| project-rename Role = ['User Role']\\r\\n| project ['Event Timestamp'], Username, Role, Status, Message, ['Event Data']\\r\\n| sort by ['Event Timestamp'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Audit View\",\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"failure\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Event Data\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"query - 3\",\"styleSettings\":{\"showBorder\":true}},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 3\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Audit\"},\"name\":\"audit\",\"styleSettings\":{\"margin\":\"10px\"}},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"9ec409ef-a68f-486e-93ae-602d614ff45f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Search\",\"type\":1,\"timeContext\":{\"durationMs\":86400000},\"value\":\"*\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraHealth\\r\\n| top 1 by TimeGenerated\\r\\n| extend Network = parse_json(Network)\\r\\n| extend ['Aggregated Peak Traffic (Mbps)'] = Network[0].traffic.brain.aggregated_peak_traffic_mbps\\r\\n| where (\\\"*\\\" == '{Search}' or ['Last Updated'] contains '{Search}') or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - User (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - System (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['CPU Usage - Idle (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Disk Utilization (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Memory Utilization (%)']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Power Status']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Power Error']) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(['Aggregated Peak Traffic (Mbps)']) contains '{Search}')\\r\\n| project ['Last Updated'], ['CPU Usage - User (%)'], ['CPU Usage - System (%)'], ['CPU Usage - Idle (%)'], ['Disk Utilization (%)'], ['Memory Utilization (%)'], ['Aggregated Peak Traffic (Mbps)'], ['Power Status'], ['Power Error']\\r\\n| sort by ['Last Updated'] desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"System View\",\"timeContext\":{\"durationMs\":2592000000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"name\":\"System View\",\"styleSettings\":{\"showBorder\":true}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VectraHealth\\r\\n| top 1 by TimeGenerated\\r\\n| extend Sensors = parse_json(Sensors)\\r\\n| mvapply Sensors on (project Sensors.name, Sensors.ip_address, Sensors.d_link_status, Sensors.d_aggregated_peak_traffic, Sensors.d_connectivity_status, Sensors.d_connectivity_error, Sensors.d_trafficdrop_status, Sensors.d_trafficdrop_error)\\r\\n| where (\\\"*\\\" == '{Search}' or tostring(Sensors_name) contains '{Search}') or (\\\"*\\\" == '{Search}' or tostring(Sensors_ip_address) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_link_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_connectivity_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_connectivity_error) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_trafficdrop_status) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_trafficdrop_error) contains '{Search}')  or (\\\"*\\\" == '{Search}' or tostring(Sensors_d_aggregated_peak_traffic) contains '{Search}')\\r\\n| project Name = Sensors_name, ['IP Address'] = Sensors_ip_address, ['Connectivity Status'] = Sensors_d_connectivity_status, ['Connectivity Error'] = Sensors_d_connectivity_error, ['Traffic Drop Status'] = Sensors_d_trafficdrop_status, ['Traffic Drop Error'] = Sensors_d_trafficdrop_error, ['Aggregated Peak Traffic (Mbps)'] =  Sensors_d_aggregated_peak_traffic, ['Interface Link Status'] = Sensors_d_link_status\",\"size\":0,\"showAnalytics\":true,\"title\":\"Sensors View\",\"timeContext\":{\"durationMs\":2592000000},\"showRefreshButton\":true,\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Interface Link Status\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"colors\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"Degraded\",\"representation\":\"red\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":\"\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":10000,\"filter\":true}},\"name\":\"Sensor View\",\"styleSettings\":{\"showBorder\":true}}]},\"name\":\"group - 1\"},{\"type\":1,\"content\":{\"json\":\"📝 ***Refresh the web page to fetch details of recently collected events***\"},\"name\":\"text - 0\"}]},\"conditionalVisibility\":{\"parameterName\":\"setTab\",\"comparison\":\"isEqualTo\",\"value\":\"Health\"},\"name\":\"health\"}]},\"name\":\"main\"}],\"fromTemplateId\":\"sentinel-VectraXDR\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[variables('workspaceResourceId')]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(variables('workbookId1'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=VectraXDR; logoFileName=; description=This workbook provides visualization of Audit, Detections, Entity Scoring, Lockdown and Health data.; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=Vectra XDR; templateRelativePath=VectraXDR.json; subtitle=; provider=Vectra}.description",
                "parentId": "[variables('workbookId1')]",
                "contentId": "[variables('_workbookContentId1')]",
                "kind": "Workbook",
                "version": "[variables('workbookVersion1')]",
                "source": {
                  "kind": "Solution",
                  "name": "Vectra XDR",
                  "sourceId": "[variables('_solutionId')]"
                },
                "author": {
                  "name": "TME",
                  "email": "[variables('_email')]"
                },
                "support": {
                  "name": "Vectra Support",
                  "email": "support@vectra.ai",
                  "tier": "Partner",
                  "link": "https://www.vectra.ai/support"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "Audits_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Detections_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Entity_Scoring_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Lockdown_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "Health_Data_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "VectraDataConnector",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "packageVersion": "[variables('_solutionVersion')]",
        "packageName": "[variables('_solutionName')]",
        "packageId": "[variables('_solutionId')]",
        "contentSchemaVersion": "3.0.0",
        "contentId": "[variables('_workbookContentId1')]",
        "contentKind": "Workbook",
        "displayName": "[parameters('workbook1-name')]",
        "contentProductId": "[variables('_workbookcontentProductId1')]",
        "id": "[variables('_workbookcontentProductId1')]",
        "version": "[variables('workbookVersion1')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "apiVersion": "2023-04-01-preview",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "version": "3.0.1",
        "kind": "Solution",
        "contentSchemaVersion": "3.0.0",
        "displayName": "Vectra XDR",
        "publisherDisplayName": "Vectra Support",
        "descriptionHtml": "<p><strong>Note:</strong> <em>There may be <a href=\"https://aka.ms/sentinelsolutionsknownissues\">known issues</a> pertaining to this Solution, please refer to them before installing.</em></p>\n<p>Vectra AI is the leader in AI-driven threat detection and response for hybrid and multi-cloud enterprises. Vectra AI's cloud-native platform - powered by our patented Attack Signal Intelligence- provide security teams with unified threat visibility, context and control across public cloud, SaaS, identity and data center networks in a prioritized feed. Vectra AI-driven Attack Signal IntelligenceTM, empowers SOC analysts to rapidly prioritize, investigate and respond to the most urgent cyber-attacks in their hybrid cloud environment. Organizations worldwide rely on Vectra AI's cloud-native platform and MDR services to see and stop attacks from becoming breaches. The Vectra AI App enables the security operations team to consume the industry's richest threat signals spanning public cloud, SaaS, identity and data center networks inside of Microsoft Sentinel. For more information, visit <a href=\"http://www.vectra.ai\">www.vectra.ai</a>.</p>\n<p>The Vectra XDR App for Microsoft Sentinel contains:\nData Connector to ingest events generated by Vectra XDR (through OMS agent).\nWorkbook: Dynamic dashboard view of Entities, Detections, Lockdown, Audit and, Health</p>\n<p><strong>Data Connectors:</strong> 1, <strong>Parsers:</strong> 5, <strong>Workbooks:</strong> 1</p>\n<p><a href=\"https://aka.ms/azuresentinel\">Learn more about Microsoft Sentinel</a> | <a href=\"https://aka.ms/azuresentinelsolutionsdoc\">Learn more about Solutions</a></p>\n",
        "contentKind": "Solution",
        "contentProductId": "[variables('_solutioncontentProductId')]",
        "id": "[variables('_solutioncontentProductId')]",
        "icon": "<img src=\"https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/Logos/AIVectraDetect.svg\" width=\"75px\" height=\"75px\">",
        "contentId": "[variables('_solutionId')]",
        "parentId": "[variables('_solutionId')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra XDR",
          "sourceId": "[variables('_solutionId')]"
        },
        "author": {
          "name": "TME",
          "email": "[variables('_email')]"
        },
        "support": {
          "name": "Vectra Support",
          "email": "support@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_dataConnectorContentId1')]",
              "version": "[variables('dataConnectorVersion1')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId1')]",
              "version": "[variables('parserVersion1')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId2')]",
              "version": "[variables('parserVersion2')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId3')]",
              "version": "[variables('parserVersion3')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId4')]",
              "version": "[variables('parserVersion4')]"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_parserContentId5')]",
              "version": "[variables('parserVersion5')]"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_workbookContentId1')]",
              "version": "[variables('workbookVersion1')]"
            }
          ]
        },
        "firstPublishDate": "2023-07-04",
        "lastPublishDate": "2023-07-04",
        "providers": [
          "Vectra"
        ],
        "categories": {
          "domains": [
            "Security - Network",
            "Security - Cloud Security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_solutionId'))]"
    }
  ],
  "outputs": {}
}
